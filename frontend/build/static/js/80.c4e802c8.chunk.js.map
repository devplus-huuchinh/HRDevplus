{"version":3,"sources":["assets/images/sign.jpg","features/Auth/pages/CheckYourEmailPage/index.jsx","features/Auth/components/ForgotPasswordForm/index.jsx","features/Auth/pages/ForgotPasswordPage/index.jsx","features/Auth/components/LoginForm/index.jsx","features/Auth/pages/LoginPage/index.jsx","features/Auth/components/ResetPasswordForm/index.jsx","library/hooks/useQuery.js","features/Auth/pages/ResetPasswordPage/index.jsx","features/Auth/index.jsx"],"names":["module","exports","CheckYourEmailPage","email","useParams","className","status","title","extra","key","block","type","onClick","window","open","ForgotPasswordForm","props","useForm","form","handleForgotPasswordSubmit","autoComplete","onFinish","layout","Item","label","name","rules","required","placeholder","htmlType","defaultProps","Text","ForgotPasswordPage","history","useHistory","useState","isSpinning","setIsSpinning","formData","a","authApi","forgotPassword","message","error","push","console","log","spinning","strong","level","LoginForm","handleLoginFormSubmit","initialValues","remember","onFinishFailed","errorInfo","direction","size","style","width","Password","to","LoginPage","dispatch","useDispatch","isLoading","setIsLoading","login","authAction","clearMenu","appAction","csrfCookie","response","localStorage","setItem","id_token","access_token","location","src","loginImgBackground","alt","ResetPasswordForm","handleResetPassword","hasFeedback","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","useQuery","search","useLocation","useMemo","URLSearchParams","ResetPasswordPage","query","resetPassword","token","get","Search","match","useRouteMatch","path","url","component"],"mappings":"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","file":"static/js/80.c4e802c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sign.adf5846b.jpg\";","import { Button, Result } from 'antd';\r\nimport React from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './CheckYourEmailPage.scss';\r\n\r\nconst CheckYourEmailPage = () => {\r\n   const { email } = useParams();\r\n\r\n   return (\r\n      <div className='check-email-page'>\r\n         <Result\r\n            status='success'\r\n            title={\r\n               <>\r\n                  <div className='check--title'>Check your email</div>\r\n                  <div className='check--subTitle'>\r\n                     We sent a password reset link to\r\n                  </div>\r\n                  <div className='check--email'>\r\n                     <b>{email}</b>\r\n                  </div>\r\n               </>\r\n            }\r\n            extra={[\r\n               <Button\r\n                  key='buy'\r\n                  block\r\n                  type='primary'\r\n                  onClick={() =>\r\n                     window.open('https://mail.google.com/mail/u/0/#inbox')\r\n                  }\r\n               >\r\n                  Open Gmail\r\n               </Button>,\r\n            ]}\r\n         />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default CheckYourEmailPage;\r\n","import { Button, Form, Input } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport './ForgotPasswordForm.scss';\r\n\r\nForgotPasswordForm.propTypes = {\r\n   handleForgotPasswordSubmit: PropTypes.func,\r\n};\r\n\r\nForgotPasswordForm.defaultProps = {\r\n   handleForgotPasswordSubmit: null,\r\n};\r\n\r\nfunction ForgotPasswordForm(props) {\r\n   const [form] = Form.useForm();\r\n   const { handleForgotPasswordSubmit } = props;\r\n\r\n   return (\r\n      <div className='forgot-password-form'>\r\n         <Form\r\n            form={form}\r\n            autoComplete='off'\r\n            className='forgot-form--input'\r\n            onFinish={handleForgotPasswordSubmit}\r\n            layout='vertical'\r\n         >\r\n            <Form.Item\r\n               label='Email'\r\n               name='email'\r\n               rules={[{ required: true, type: 'email' }]}\r\n            >\r\n               <Input placeholder='Please enter your account email' />\r\n            </Form.Item>\r\n            <Form.Item className='forgot-form--submit'>\r\n               <Button type='primary' htmlType='submit' block>\r\n                  Submit\r\n               </Button>\r\n            </Form.Item>\r\n         </Form>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default ForgotPasswordForm;\r\n","import { message, Spin, Typography } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport authApi from '../../../../api/authApi';\r\nimport ForgotPasswordForm from '../../components/ForgotPasswordForm';\r\nimport './ForgotPasswordPage.scss';\r\n\r\nconst { Text } = Typography;\r\n\r\nfunction ForgotPasswordPage(props) {\r\n   let history = useHistory();\r\n   const [isSpinning, setIsSpinning] = useState(false);\r\n\r\n   const handleForgotPasswordSubmit = async (formData) => {\r\n      try {\r\n         setIsSpinning(true);\r\n\r\n         const response = await authApi.forgotPassword({\r\n            email: formData.email,\r\n         });\r\n\r\n         if (response.message === 'generate_link_error') {\r\n            setIsSpinning(false);\r\n            return message.error('Something went wrong! Please try again.');\r\n         }\r\n\r\n         setIsSpinning(false);\r\n         return history.push(`/auth/forgot-password/success/${formData.email}`);\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <Spin spinning={isSpinning}>\r\n         <div className='forgot-password-page'>\r\n            <Text strong className='forgot--title' level={3}>\r\n               Forgot password?\r\n            </Text>\r\n            <Text className='forgot--subTitle'>\r\n               Dont worries, we'll send you reset instructions.\r\n            </Text>\r\n            <ForgotPasswordForm\r\n               handleForgotPasswordSubmit={handleForgotPasswordSubmit}\r\n            />\r\n         </div>\r\n      </Spin>\r\n   );\r\n}\r\n\r\nexport default ForgotPasswordPage;\r\n","import { Button, Form, Input, Space } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './LoginForm.scss';\r\n\r\nLoginForm.propTypes = {\r\n   handleLoginFormSubmit: PropTypes.func,\r\n};\r\n\r\nLoginForm.defaultProps = {\r\n   handleLoginFormSubmit: null,\r\n};\r\n\r\nfunction LoginForm(props) {\r\n   const { handleLoginFormSubmit } = props;\r\n\r\n   const onFinishFailed = (errorInfo) => {\r\n      console.log('Failed:', errorInfo);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Form\r\n            initialValues={{ remember: true }}\r\n            onFinish={handleLoginFormSubmit}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete='off'\r\n            className='login-form'\r\n         >\r\n            <Space direction='vertical' size={10} style={{ width: '100%' }}>\r\n               <div>\r\n                  <label className='login-form--label'>Email</label>\r\n                  <Form.Item\r\n                     className='login-form--inputWrap'\r\n                     name='email'\r\n                     rules={[\r\n                        {\r\n                           required: true,\r\n                           message: 'Please input your username!',\r\n                        },\r\n                     ]}\r\n                  >\r\n                     <Input\r\n                        className='login-form--input'\r\n                        placeholder='Enter your username'\r\n                     />\r\n                  </Form.Item>\r\n               </div>\r\n               <div>\r\n                  <label className='login-form--label'>Password</label>\r\n                  <Form.Item\r\n                     className='login-form--inputWrap'\r\n                     name='password'\r\n                     rules={[\r\n                        {\r\n                           required: true,\r\n                           message: 'Please input your password!',\r\n                        },\r\n                     ]}\r\n                  >\r\n                     <Input.Password\r\n                        className='login-form--input'\r\n                        placeholder='Enter your password'\r\n                     />\r\n                  </Form.Item>\r\n               </div>\r\n               <Form.Item>\r\n                  <Button\r\n                     type='primary'\r\n                     htmlType='submit'\r\n                     block\r\n                     className='login-form--submit'\r\n                  >\r\n                     Sign in\r\n                  </Button>\r\n               </Form.Item>\r\n               <Form.Item className='login-form--signUp'>\r\n                  <Link to='/auth/forgot-password'>Forgot password?</Link>\r\n               </Form.Item>\r\n            </Space>\r\n         </Form>\r\n      </>\r\n   );\r\n}\r\n\r\nexport default LoginForm;\r\n","import appAction from '@iso/redux/app/actions';\r\nimport authAction from '@iso/redux/auth/actions';\r\nimport { message, Spin, Typography } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authApi from '../../../../api/authApi';\r\nimport loginImgBackground from '../../../../assets/images/sign.jpg';\r\nimport LoginForm from '../../components/LoginForm';\r\nimport './LoginPage.scss';\r\n\r\nconst { Text } = Typography;\r\n\r\nfunction LoginPage(props) {\r\n   const dispatch = useDispatch();\r\n\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const { login } = authAction;\r\n   const { clearMenu } = appAction;\r\n\r\n   const handleLoginFormSubmit = async (formData) => {\r\n      try {\r\n         setIsLoading(true);\r\n         await authApi.csrfCookie();\r\n         const response = await authApi.login(formData);\r\n         localStorage.setItem('idToken', response.id_token);\r\n         if (!response.access_token) {\r\n            setIsLoading(false);\r\n            return message.error('Incorrect username or password.');\r\n         }\r\n         dispatch(clearMenu());\r\n         dispatch(login(response.access_token));\r\n         setIsLoading(false);\r\n         return (window.location = '/dashboard');\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <Spin spinning={isLoading}>\r\n         <div className='login-page'>\r\n            <div className='login-page--background'>\r\n               <img\r\n                  src={loginImgBackground}\r\n                  alt='background'\r\n                  className='login-page--image'\r\n               />\r\n            </div>\r\n            <div className='login-page--form'>\r\n               <div className='login-page--title'>\r\n                  <Text>ST United</Text>\r\n               </div>\r\n               <LoginForm handleLoginFormSubmit={handleLoginFormSubmit} />\r\n            </div>\r\n         </div>\r\n      </Spin>\r\n   );\r\n}\r\n\r\nexport default LoginPage;\r\n","import { Button, Form, Input } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport '../../components/ForgotPasswordForm/ForgotPasswordForm.scss';\r\n\r\nResetPasswordForm.propTypes = {\r\n   handleResetPassword: PropTypes.func,\r\n};\r\n\r\nResetPasswordForm.defaultProps = {\r\n   handleResetPassword: null,\r\n};\r\n\r\nfunction ResetPasswordForm(props) {\r\n   const { handleResetPassword } = props;\r\n   const [form] = Form.useForm();\r\n\r\n   return (\r\n      <div className='forgot-password-form'>\r\n         <Form\r\n            form={form}\r\n            autoComplete='off'\r\n            className='forgot-form--input'\r\n            onFinish={handleResetPassword}\r\n            layout='vertical'\r\n         >\r\n            <Form.Item\r\n               name='email'\r\n               rules={[\r\n                  {\r\n                     required: true,\r\n                     type: 'email',\r\n                  },\r\n               ]}\r\n               label='Email'\r\n            >\r\n               <Input placeholder='Enter your account email' />\r\n            </Form.Item>\r\n            <Form.Item\r\n               name='password'\r\n               label='Password'\r\n               rules={[\r\n                  {\r\n                     required: true,\r\n                     message: 'Please input your password!',\r\n                  },\r\n               ]}\r\n               hasFeedback\r\n            >\r\n               <Input.Password placeholder='Enter your new password' />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n               name='password_confirmation'\r\n               label='Confirm Password'\r\n               dependencies={['password']}\r\n               hasFeedback\r\n               rules={[\r\n                  {\r\n                     required: true,\r\n                     message: 'Please confirm your password!',\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                     validator(_, value) {\r\n                        if (!value || getFieldValue('password') === value) {\r\n                           return Promise.resolve();\r\n                        }\r\n                        return Promise.reject(\r\n                           new Error(\r\n                              'The two passwords that you entered do not match!'\r\n                           )\r\n                        );\r\n                     },\r\n                  }),\r\n               ]}\r\n            >\r\n               <Input.Password placeholder='Re-enter your new password' />\r\n            </Form.Item>\r\n            <Form.Item className='forgot-form--submit'>\r\n               <Button type='primary' htmlType='submit' block>\r\n                  Submit\r\n               </Button>\r\n            </Form.Item>\r\n         </Form>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default ResetPasswordForm;\r\n","import { useMemo } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nconst useQuery = () => {\r\n   const { search } = useLocation();\r\n   return useMemo(() => new URLSearchParams(search), [search]);\r\n};\r\n\r\nexport default useQuery;\r\n","import React, { useState } from 'react';\r\nimport '../ForgotPasswordPage/ForgotPasswordPage.scss';\r\nimport { message, Spin, Typography } from 'antd';\r\nimport ResetPasswordForm from '../../components/ResetPasswordForm';\r\nimport useQuery from '../../../../library/hooks/useQuery';\r\nimport authApi from '../../../../api/authApi';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst { Text } = Typography;\r\n\r\nconst ResetPasswordPage = () => {\r\n   const [isSpinning, setIsSpinning] = useState(false);\r\n   let query = useQuery();\r\n   let history = useHistory();\r\n\r\n   const handleResetPassword = async (formData) => {\r\n      try {\r\n         setIsSpinning(true);\r\n\r\n         const response = await authApi.resetPassword({\r\n            ...formData,\r\n            token: query.get('token'),\r\n         });\r\n\r\n         if (response.message === 'Password reset successfully') {\r\n            setIsSpinning(false);\r\n            return history.push('/auth/login');\r\n         }\r\n\r\n         setIsSpinning(false);\r\n         return message.error('Something went wrong! Please try again.');\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <Spin spinning={isSpinning}>\r\n         <div className='forgot-password-page'>\r\n            <Text strong className='forgot--title'>\r\n               Reset your password\r\n            </Text>\r\n            <Text className='forgot--subTitle'>\r\n               Please input your new password.\r\n            </Text>\r\n            <ResetPasswordForm handleResetPassword={handleResetPassword} />\r\n         </div>\r\n      </Spin>\r\n   );\r\n};\r\n\r\nexport default ResetPasswordPage;\r\n","import React from 'react';\r\nimport { Route, Switch, useRouteMatch } from 'react-router';\r\nimport CheckYourEmailPage from './pages/CheckYourEmailPage';\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport ResetPasswordPage from './pages/ResetPasswordPage';\r\n\r\nfunction Search(props) {\r\n   const match = useRouteMatch();\r\n\r\n   return (\r\n      <Switch>\r\n         <Route\r\n            path={`${match.url}/forgot-password/success/:email`}\r\n            component={CheckYourEmailPage}\r\n         />\r\n         <Route\r\n            path={`${match.url}/forgot-password`}\r\n            component={ForgotPasswordPage}\r\n         />\r\n         <Route\r\n            path={`${match.url}/reset-password`}\r\n            component={ResetPasswordPage}\r\n         />\r\n         <Route path={`${match.url}/login`} component={LoginPage} />\r\n      </Switch>\r\n   );\r\n}\r\n\r\nexport default Search;\r\n"],"sourceRoot":""}