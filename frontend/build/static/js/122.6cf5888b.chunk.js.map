{"version":3,"sources":["library/helpers/history.js","config/auth0.config.js","containers/Authentication/Auth0/Auth0.js","containers/Authentication/Auth0/Auth0Callback.js","components/Notification.js","components/ColorChooser.style.js","components/ColorChoser.js","components/EditableComponent.js","components/uielements/popover.js"],"names":["createBrowserHistory","forceRefresh","clientID","domain","allowedConnections","rememberLastLogin","language","closable","options","auth","autoParseHash","responseType","redirect","redirectUrl","languageDictionary","title","emailInputPlaceholder","passwordInputPlaceholder","theme","labeledSubmitButton","logo","primaryColor","authButtons","connectionName","displayName","foregroundColor","Auth0","lock","Auth0Lock","Auth0Config","login","show","handleAuthentication","on","setSession","error","notification","authResult","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","accessToken","idToken","history","replace","logout","removeItem","isAuthenticated","parse","getItem","EventEmitter","Auth0Callback","useEffect","authActions","createNotification","type","message","description","ColorChooserDropdown","styled","div","props","borderRadius","WithDirection","colors","seectedColor","changeColor","React","useState","visible","setVisibility","content","className","map","color","index","style","background","key","onClick","trigger","onVisibleChange","backgroundColor","EditableComponent","value","editable","state","setState","check","onChange","itemKey","rows","event","target","onPressEnter","CheckOutlined","EditOutlined"],"mappings":"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","file":"static/js/122.6cf5888b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory({\r\n  forceRefresh: true,\r\n});\r\n","export default {\r\n  clientID: \"your_client_id\",\r\n  domain: \"your_domain_name\",\r\n  allowedConnections: [\"Username-Password-Authentication\"],\r\n  rememberLastLogin: true,\r\n  language: \"en\",\r\n  closable: true,\r\n  options: {\r\n    auth: {\r\n      autoParseHash: true,\r\n      responseType: \"token id_token\",\r\n      redirect: true,\r\n      redirectUrl:\r\n        process.env.NODE_ENV !== \"production\"\r\n          ? \"http://localhost:3000/auth0loginCallback\"\r\n          : \"https://your_domain_name/auth0loginCallback\"\r\n    },\r\n    languageDictionary: {\r\n      title: \"DevPlus\",\r\n      emailInputPlaceholder: \"demo@gmail.com\",\r\n      passwordInputPlaceholder: \"demodemo\"\r\n    },\r\n    theme: {\r\n      labeledSubmitButton: true,\r\n      logo: \"your_logo_url\",\r\n      primaryColor: \"#E14615\",\r\n      authButtons: {\r\n        connectionName: {\r\n          displayName: \"Log In\",\r\n          primaryColor: \"#b7b7b7\",\r\n          foregroundColor: \"#000000\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { EventEmitter } from 'events';\r\nimport Auth0Lock from 'auth0-lock';\r\nimport history from '@iso/lib/helpers/history';\r\nimport Auth0Config from '@iso/config/auth0.config';\r\nimport { notification } from '@iso/components';\r\n\r\nclass Auth0 extends EventEmitter {\r\n  lock = new Auth0Lock(\r\n    Auth0Config.clientID,\r\n    Auth0Config.domain,\r\n    Auth0Config.options\r\n  );\r\n\r\n  login = () => {\r\n    if (!this.lock) {\r\n      return;\r\n    }\r\n    this.lock.show();\r\n  };\r\n  handleAuthentication = () => {\r\n    // Add callback Lock's `authenticated` event\r\n    this.lock.on('authenticated', this.setSession);\r\n    // Add callback for Lock's `authorization_error` event\r\n    this.lock.on('authorization_error', error =>\r\n      notification('error', 'Wrong mail or password')\r\n    );\r\n  };\r\n  setSession = authResult => {\r\n    // Set the time that the access token will expire at\r\n    let expiresAt = JSON.stringify(\r\n      authResult.expiresIn * 1000 + new Date().getTime()\r\n    );\r\n    localStorage.setItem('access_token', authResult.accessToken);\r\n    localStorage.setItem('id_token', authResult.idToken);\r\n    localStorage.setItem('expires_at', expiresAt);\r\n    // navigate to the dashboard route\r\n    history.replace('/dashboard');\r\n  };\r\n  logout = () => {\r\n    // Clear access token and ID token from local storage\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('id_token');\r\n    localStorage.removeItem('expires_at');\r\n    // navigate to the home route\r\n    history.replace('/');\r\n  };\r\n\r\n  isAuthenticated = () => {\r\n    let expiresAt = JSON.parse(localStorage.getItem('expiresAt'));\r\n    return new Date().getTime() < expiresAt;\r\n  };\r\n}\r\nexport default new Auth0();\r\n","import React, { useEffect } from 'react';\r\nimport Auth0 from './Auth0';\r\nimport authActions from '@iso/redux/auth/actions';\r\nconst Auth0Callback = () => {\r\n  useEffect(() => {\r\n    Auth0.handleAuthentication();\r\n    authActions.login();\r\n  }, []);\r\n\r\n  return <p>Loading ...</p>;\r\n};\r\n\r\nexport default Auth0Callback;\r\n","import { notification } from 'antd';\r\n\r\nconst createNotification = (type, message, description) => {\r\n  notification[type]({\r\n    message,\r\n    description,\r\n  });\r\n};\r\nexport default createNotification;\r\n","import styled from 'styled-components';\r\nimport { borderRadius } from '@iso/lib/helpers/style_utils';\r\nimport WithDirection from '@iso/lib/helpers/rtl';\r\nconst ColorChooserDropdown = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  max-width: 160px;\r\n\r\n  .ant-btn {\r\n    width: 20px;\r\n    height: 20px;\r\n    border: 0;\r\n    outline: 0;\r\n    padding: 0;\r\n    margin: ${(props) =>\r\n      props['data-rtl'] === 'rtl' ? '0 0 0 15px' : '0 15px 0 0'};\r\n    ${borderRadius('3px')};\r\n\r\n    &:empty {\r\n      visibility: visible;\r\n    }\r\n\r\n    &:last-child {\r\n      margin: 0;\r\n    }\r\n\r\n    &:nth-child(n + 6) {\r\n      margin-top: 15px;\r\n    }\r\n\r\n    &:nth-child(5n) {\r\n      margin-right: 0;\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default WithDirection(ColorChooserDropdown);\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport Popover from './uielements/popover';\r\nimport ColorChooserDropdown from './ColorChooser.style';\r\n\r\nexport default function ({ colors, seectedColor, changeColor }) {\r\n  const [visible, setVisibility] = React.useState(false);\r\n\r\n  function hide() {\r\n    setVisibility(false);\r\n  }\r\n  function handleVisibleChange() {\r\n    setVisibility((visible) => !visible);\r\n  }\r\n  const content = () => (\r\n    <ColorChooserDropdown className=\"isoColorOptions\">\r\n      {colors.map((color, index) => {\r\n        const onClick = () => {\r\n          hide();\r\n          changeColor(index);\r\n        };\r\n        const style = {\r\n          background: color,\r\n        };\r\n        return <Button key={index} onClick={onClick} style={style} />;\r\n      })}\r\n    </ColorChooserDropdown>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={content()}\r\n      trigger=\"click\"\r\n      visible={visible}\r\n      onVisibleChange={handleVisibleChange}\r\n    >\r\n      <Button\r\n        style={{ backgroundColor: colors[seectedColor] }}\r\n        className=\"isoColorChooser\"\r\n      />\r\n    </Popover>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { CheckOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { Textarea as Input } from './uielements/input';\r\n\r\nexport default function EditableComponent(props) {\r\n  const [state, setState] = React.useState({\r\n    value: props.value,\r\n    editable: false,\r\n  });\r\n\r\n  function handleChange(event) {\r\n    const value = event.target.value;\r\n    setState({ ...state, value });\r\n  }\r\n  function check() {\r\n    setState({ ...state, editable: false });\r\n    if (props.onChange) {\r\n      props.onChange(props.itemKey, state.value);\r\n    }\r\n  }\r\n  function edit() {\r\n    setState({ ...state, editable: true });\r\n  }\r\n\r\n  const { value, editable } = state;\r\n  return (\r\n    <div className=\"isoNoteContent\">\r\n      {editable ? (\r\n        <div className=\"isoNoteEditWrapper\">\r\n          <Input\r\n            rows={3}\r\n            value={value}\r\n            onChange={handleChange}\r\n            onPressEnter={check}\r\n          />\r\n          <CheckOutlined className=\"isoNoteEditIcon\" onClick={check} />\r\n        </div>\r\n      ) : (\r\n        <p className=\"isoNoteTextWrapper\" onClick={edit}>\r\n          {value || ' '}\r\n          <EditOutlined className=\"isoNoteEditIcon\" />\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Popover } from 'antd';\r\n\r\nexport default Popover;\r\n"],"sourceRoot":""}